devtools::document()
rm(list = ls())
devtools::document()
rm(list = ls())
devtools::document()
Rcpp:::LdFlags()
Rcpp:::LdFlags()
PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"
PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"`
PKG_LIBS = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript.exe" -e "Rcpp:::LdFlags()")
devtools::document()
compileAttributes()
rm(list = ls())
devtools::document()
rm(list = ls())
devtools::document()
devtools::document()
library(fpta)
devtools::document()
rm(list = ls())
devtools::document()
devtools::document()
devtools::document()
devtools::document()
M = matrix(c(1,1,1,1,0,1,1.5,2,0,1,2.25,4), nrow = 4, ncol = 3)
f = function(x, y){
return(x**2*y -y**2*x +x**2 -y**2 +x**3*y -y**3*x +x -y)
}
f_val = matrix(c(0,2,3.75,6, -2, 0, 4.375, 12, -3.75, -4.375, 0 ,9, -6,-12,-9,0), ncol = 4, nrow = 4)
x0 = function(x){
return(1)
}
x1 = function(x){
return(x)
}
x2 = function(x){
return(x**2)
}
x3 = function(x){
return(x**3)
}
list_f = list(x0,x1,x2)
a = fpta::solve_embedding(f_val, list_f, c(0,1,1.5,2))
devtools::document()
a = fpta::solve_embedding(f_val, list_f, c(0,1,1.5,2))
fpta_predict(list_f, a$Mat_Embed_Coef, rnorm(100), rnorm(100))
plot_embedding (list_f, a$Mat_Embed_Coef, rnorm(1000), 1)
devtools::document()
a = fpta::solve_embedding(f_val, list_f, c(0,1,1.5,2))
fpta_predict(list_f, a$Mat_Embed_Coef, rnorm(100), rnorm(100))
fpta_predict(list_f, a$Mat_Embed_Coef, rnorm(100), rnorm(99))
fpta_predict(list_f, a$Mat_Embed_Coef, rnorm(100), rnorm(100))
library(usethis)
use_testthat()
use_test()
use_test("NullInputTest")
?expect
?expect_equal
usethis::use_vignette("FPTA_vignette", "FPTA")
library(fpta)
f_val = matrix(c(0,2,3.75,6, -2, 0, 4.375, 12, -3.75, -4.375, 0 ,9, -6,-12,-9,0), ncol = 4, nrow = 4)
f1 = function(x){
return(1.096210 + 3.116605 * x - 1.457469*x^2 )
}
f2 = function(x){
return(1.367623 + 3.000896 * x -2.730560*x^2 )
}
x0 = function(x){
return(1)
}
x1 = function(x){
return(x)
}
x2 = function(x){
return(x**2)
}
list_f = list(x0,x1,x2)
a = fpta::solve_embedding(f_val, list_f, c(0,1,1.5,2))
a
f1 = function(x){
return(1.096210 + 3.116605 * x - 1.457469*x^2 )
}
f2 = function(x){
return(1.367623 + 3.000896 * x -2.730560*x^2 )
}
f_1(1.2)*f_2(1.5) - f_1(1.5)*f_2(1.2)
f1(1.2)*f2(1.5) - f1(1.5)*f2(1.2)
fpta::fpta_predict(list_basis = list_f, a$Mat_Embed_Coef, c(1.2), c(1.5))
f(1.2,1.5)
plot_embedding (list_f, a$Mat_Embed_Coef, rnorm(1000), 1)
devtools::build()
devtools::build()
devtools::install_github("patrickbai97/FPTA", build_vignettes = TRUE)
